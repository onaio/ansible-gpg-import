---
- name: Ensure the import directory is empty
  become: yes
  become_user: "root"
  file:
    path: "{{ import_directory }}"
    state: absent

- name: Ensure the import directory is empty
  become: yes
  become_user: "root"
  file:
    path: "{{ import_directory }}"
    state: directory
    mode: 0750
    owner: "{{ gpg_user }}"
    group: "{{ gpg_group }}"

- name: Copy gpg keys
  copy:
    src: "{{ item.src }}"
    dest: "{{ import_directory }}/{{ item.name }}"
    owner: "{{ gpg_user }}"
    group: "{{ gpg_group }}"
    mode:  0600
  become: yes
  become_user: "{{ gpg_user }}"
  with_items:
    - { name: private.key, src: "{{ gpg_private_key }}" }
    - { name: public.key, src: "{{ gpg_public_key }}" }
    - { name: trust, src: "{{ gpg_trust_file }}" }

- name: Ensure the gpg config exists
  become: yes
  become_user: "{{ gpg_user }}"
  command: "gpg --list-keys"
  args:
    creates: "{{ gpg_home }}/.gnupg"

- name: Import public key
  become: yes
  become_user: "{{ gpg_user }}"
  command: "gpg --trustdb-name {{ gpg_trustdb_file }} --import {{ import_directory }}/public.key"
  args:
    creates: "{{ gpg_home }}/.gnupg/{{ gpg_trustdb_file }}"

- name: Import private key
  become: yes
  become_user: "{{ gpg_user }}"
  command: "gpg --allow-secret-key-import --import {{ import_directory }}/private.key"
  changed_when: output is defined and output.stdout != ""

- name: Add trust
  become: yes
  become_user: "{{ gpg_user }}"
  command: "gpg --import-ownertrust {{ import_directory }}/trust"
  changed_when: output is defined and output.stdout != ""

- name: Delete temporary files
  become: yes
  become_user: "root"
  file:
    path: "{{ import_directory }}"
    state: absent
